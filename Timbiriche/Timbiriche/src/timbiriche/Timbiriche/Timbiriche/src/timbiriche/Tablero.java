/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timbiriche;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.event.TableColumnModelEvent;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author pc
 */
public class Tablero extends javax.swing.JPanel implements MouseListener{

    private List<Jugador> listaDeJugadores;
    private List<Nodo> listaDeNodos;
    private List<Linea> listaDeLineas;
    private List<Cuadro> listaDeCuadros;
    private Nodo nodoInicio;
    private Nodo nodoFinal;
    private Linea linea;
    private Jugador jugador;
    
    /**
     * Creates new form pantallaJuego
     * @param listaDeJugadores
     */
    public Tablero(List<Jugador> listaDeJugadores) {
        initComponents();
        this.listaDeNodos = new ArrayList<>();
        this.listaDeLineas = new ArrayList<>();
        this.listaDeCuadros = new ArrayList<>();
        this.listaDeJugadores = listaDeJugadores;
        this.setSize(860, 860);
        this.addMouseListener(this);
        this.jugador = this.listaDeJugadores.get(0);
        this.jLabel3.setText(jugador.getNombre());
        crearNodosDeTablero();
    }
    
    public Jugador getTurnoJugador() {
        return jugador;
    }
    /**
     * 
     */
    private void crearNodosDeTablero() {
        int numeroDeJugadores = this.listaDeJugadores.size();
        int numeroDeNodos = 0;
        if(numeroDeJugadores == 2) {
            numeroDeNodos = 10;
        }
        if(numeroDeJugadores == 3) {
            numeroDeNodos = 20;
        }
        if(numeroDeJugadores == 4) {
            numeroDeNodos = 40;
        }
        
        int espacioEntreNodos = this.getWidth()/numeroDeNodos;
        int ejeX;
        int ejeY=20;
        
        Nodo nuevoNodo;
        for (int i = 0; i < numeroDeNodos; i++) {
            ejeX= 20;
            for (int j = 0; j < numeroDeNodos; j++) {
                nuevoNodo = new Nodo(ejeX, ejeY);
                listaDeNodos.add(nuevoNodo);
                ejeX += espacioEntreNodos;
            }
            ejeY += espacioEntreNodos;
        }        
    }

    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        //int numero = 1;
        Graphics2D g2 = (Graphics2D) g.create();
        
        for (Linea lineaLista : listaDeLineas) {
            lineaLista.pintar(g2);
        }
        
        for (Cuadro cuadro : listaDeCuadros) {
            cuadro.pintar(g2);
        }
        
        for(Nodo nodo: this.listaDeNodos) {
            nodo.setColor(Color.BLACK);
            nodo.pintar(g2);
//            g2.drawString(String.valueOf(numero), nodo.getEjeX(), nodo.getEjeY()-5);
//            numero++;
        }
        
//        Avatar avatar = jugador.getAvatar();
//        avatar.setTamaño(70);
//        avatar.setEjeX(0);
//        avatar.setEjeY(0);
//        avatar.pintar(g2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel_Puntuacion = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jPanel_Puntuacion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Puntuación");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "null"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Turno");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton1.setText("Abandonar Partida");

        javax.swing.GroupLayout jPanel_PuntuacionLayout = new javax.swing.GroupLayout(jPanel_Puntuacion);
        jPanel_Puntuacion.setLayout(jPanel_PuntuacionLayout);
        jPanel_PuntuacionLayout.setHorizontalGroup(
            jPanel_PuntuacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_PuntuacionLayout.createSequentialGroup()
                .addGroup(jPanel_PuntuacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_PuntuacionLayout.createSequentialGroup()
                        .addGroup(jPanel_PuntuacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_PuntuacionLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel_PuntuacionLayout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel_PuntuacionLayout.createSequentialGroup()
                                .addGap(148, 148, 148)
                                .addComponent(jLabel2))
                            .addGroup(jPanel_PuntuacionLayout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_PuntuacionLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel_PuntuacionLayout.setVerticalGroup(
            jPanel_PuntuacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_PuntuacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 111, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(63, 63, 63))
        );

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 941, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 508, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void mouseClicked(MouseEvent me) {
        
    }

    @Override
    public void mousePressed(MouseEvent me) {
        double espacioEntreNodos = obtenerDistanciaEntreNodos();
        double distancia;
        int puntos;
        int numeroDeCuadros;
        Nodo nodo;
        nodo = validarClick(me.getPoint());
        if (nodo != null) {
            if (nodoInicio == null) {
                nodoInicio = nodo;
            } else {
                if (!nodoInicio.equals(nodo)) {
                    nodoFinal = nodo;
                    linea = new Linea(nodoInicio.getEjeX(), nodoInicio.getEjeY(), nodoFinal.getEjeX(), nodoFinal.getEjeY(), this.jugador.getColor());
                    if (!this.listaDeLineas.contains(linea)) {
                        distancia = Math.sqrt(Math.pow(linea.getEjeXPuntoFinal() - linea.getEjeXPuntoInicial(), 2) + Math.pow(linea.getEjeYPuntoFinal() - linea.getEjeYPuntoInicial(), 2));
                        if (distancia == espacioEntreNodos) {
                            this.listaDeLineas.add(linea);
                            this.asignarNodos();
                            numeroDeCuadros = this.validarCuadro();
                            if(numeroDeCuadros > 0) {
                                puntos = (Integer)jTable1.getValueAt(0,this.listaDeJugadores.indexOf(jugador));
                                puntos = puntos + numeroDeCuadros;
                                jTable1.setValueAt(puntos, 0,this.listaDeJugadores.indexOf(jugador));
                            } else {
                                controlTurnoDeJugador();
                            }
                        } else {
                            System.out.println("Linea no permitida");
                        }
                        repaint();
                    } else {
                        System.out.println("Linea ya realizada");
                    }
                    nodoInicio = null;
                    nodoFinal = null;
                }
            }
        } else {
            repaint();
            System.out.println("Elija un nodo");
            nodoInicio = null;
            nodoFinal = null;
        }
        
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        
    }

    @Override
    public void mouseExited(MouseEvent me) {
        
    }

    public void controlTurnoDeJugador() {
        int turno = this.listaDeJugadores.indexOf(this.jugador);
        if (turno == this.listaDeJugadores.size()-1) {
            this.jugador = this.listaDeJugadores.get(0);
        } else {
            this.jugador = this.listaDeJugadores.get(this.listaDeJugadores.indexOf(this.jugador)+1);
        }
        dibujarAvatar();
        
        this.jLabel3.setText(jugador.getNombre());
    }
    
    public void dibujarAvatar() {
        Graphics2D g2 = (Graphics2D) this.jPanel_Puntuacion.getGraphics().create();
        Avatar avatar = jugador.getAvatar();
        avatar.setTamaño(70);
        avatar.setEjeX(50);
        avatar.setEjeY(250);
        avatar.pintar(g2);
    }
    
    public Nodo validarClick(Point click) {
        for (Nodo nodo : listaDeNodos) {
            if(nodo.getFigura().contains(click)) {
                if (jugador.getColor().equals(Color.black)) {
                    nodo.setColor(Color.WHITE);
                } else {
                    nodo.setColor(jugador.getColor());
                }
                Graphics2D g2 = (Graphics2D) this.getGraphics();
                nodo.pintar(g2);
                return nodo;
            }
        }
        return null;
    }
    
    public void asignarNodos() {
        if(this.nodoInicio.getEjeX() < this.nodoFinal.getEjeX()) {
            this.nodoInicio.setNodoDerecha(this.nodoFinal);
            this.nodoFinal.setNodoIzquierda(this.nodoInicio);
            return;
        } else if (this.nodoInicio.getEjeX() > this.nodoFinal.getEjeX()){
            this.nodoInicio.setNodoIzquierda(this.nodoFinal);
            this.nodoFinal.setNodoDerecha(this.nodoInicio);
            return;
        }
        
        if(this.nodoInicio.getEjeY() < this.nodoFinal.getEjeY()) {
            this.nodoInicio.setNodoAbajo(this.nodoFinal);
            this.nodoFinal.setNodoArriba(this.nodoInicio);
            return;
        } else if(this.nodoInicio.getEjeY() > this.nodoFinal.getEjeY()) {
            this.nodoInicio.setNodoArriba(nodoFinal);
            this.nodoFinal.setNodoAbajo(nodoInicio);
            return;
        }        
    }
    
    /**
     * 
     * @return 
     */
    public int validarCuadro() {
        Nodo nodoAuxiliar;
        Cuadro cuadro;
        int numeroDeCuadros=0;
        double distanciaEntreNodos = obtenerDistanciaEntreNodos();
        // Valida linea de izquierda a derecha
        if (this.nodoInicio.getEjeX() < this.nodoFinal.getEjeX()) {
            //Valida si existe un cuadro arriba de la linea
            nodoAuxiliar = nodoFinal.getNodoArriba();
            if (nodoAuxiliar != null) {
                nodoAuxiliar = nodoAuxiliar.getNodoIzquierda();
                if (nodoAuxiliar != null) {
                    cuadro = new Cuadro(this.jugador.getColor(),nodoAuxiliar.getEjeX(), nodoAuxiliar.getEjeY(),distanciaEntreNodos);
                    nodoAuxiliar = nodoAuxiliar.getNodoAbajo();
                    if (nodoAuxiliar != null) {
                        this.listaDeCuadros.add(cuadro);
                        numeroDeCuadros++;
                    }
                }
            }
            //Valida si existe un cuadro debajo de la linea
            nodoAuxiliar = nodoFinal.getNodoAbajo();
            if (nodoAuxiliar != null) {
                nodoAuxiliar = nodoAuxiliar.getNodoIzquierda();
                if (nodoAuxiliar != null) {
                    nodoAuxiliar = nodoAuxiliar.getNodoArriba();
                    if (nodoAuxiliar != null) {
                        cuadro = new Cuadro(this.jugador.getColor(),nodoAuxiliar.getEjeX(), nodoAuxiliar.getEjeY(),distanciaEntreNodos);
                        this.listaDeCuadros.add(cuadro);
                        numeroDeCuadros++;
                    }
                }
            }
        //Valida la linea de derecha a izquierda
        } else if (this.nodoInicio.getEjeX() > this.nodoFinal.getEjeX()){
            //Valida si existe un cuadro arriba de la linea
            nodoAuxiliar = nodoFinal.getNodoArriba();
            if(nodoAuxiliar != null) {
                cuadro = new Cuadro(this.jugador.getColor(),nodoAuxiliar.getEjeX(), nodoAuxiliar.getEjeY(),distanciaEntreNodos);
                nodoAuxiliar = nodoAuxiliar.getNodoDerecha();
                if(nodoAuxiliar != null) {
                    nodoAuxiliar = nodoAuxiliar.getNodoAbajo();
                    if(nodoAuxiliar != null) {
                        this.listaDeCuadros.add(cuadro);
                        numeroDeCuadros++;
                    }
                }
            }
            //Valida si existe un cuadro debajo de la linea
            nodoAuxiliar = nodoFinal.getNodoAbajo();
            if (nodoAuxiliar != null) {
                cuadro = new Cuadro(this.jugador.getColor(),nodoFinal.getEjeX(), nodoFinal.getEjeY(),distanciaEntreNodos);
                nodoAuxiliar = nodoAuxiliar.getNodoDerecha();
                if (nodoAuxiliar != null) {
                    nodoAuxiliar = nodoAuxiliar.getNodoArriba();
                    if (nodoAuxiliar != null) {
                        this.listaDeCuadros.add(cuadro);
                        numeroDeCuadros++;
                    }
                }
            }
        }
        
        // Valida linea de arriba a abajo
        
        //Valida si existe un cuadro a la derecha
        if(this.nodoInicio.getEjeY() < this.nodoFinal.getEjeY()) {
            nodoAuxiliar = nodoFinal.getNodoDerecha();
            if (nodoAuxiliar != null) {
                nodoAuxiliar = nodoAuxiliar.getNodoArriba();
                if (nodoAuxiliar != null) {
                    nodoAuxiliar = nodoAuxiliar.getNodoIzquierda();
                    if (nodoAuxiliar != null) {
                        cuadro = new Cuadro(this.jugador.getColor(),nodoAuxiliar.getEjeX(), nodoAuxiliar.getEjeY(),distanciaEntreNodos);
                        this.listaDeCuadros.add(cuadro);
                        numeroDeCuadros++;
                    }
                }
            }
            //Valida si existe un cuadro a la izquierda
            nodoAuxiliar = nodoFinal.getNodoIzquierda();
            if (nodoAuxiliar != null) {
                nodoAuxiliar = nodoAuxiliar.getNodoArriba();
                if (nodoAuxiliar != null) {
                    cuadro = new Cuadro(this.jugador.getColor(),nodoAuxiliar.getEjeX(), nodoAuxiliar.getEjeY(),distanciaEntreNodos);
                    nodoAuxiliar = nodoAuxiliar.getNodoDerecha();
                    if (nodoAuxiliar != null) {
                        this.listaDeCuadros.add(cuadro);
                        numeroDeCuadros++;
                    }
                }
            }
        // Valida linea de abajo a arriba
        } else if(this.nodoInicio.getEjeY() > this.nodoFinal.getEjeY()) {
            //Valida si existe linea a la derecha
            nodoAuxiliar = nodoFinal.getNodoDerecha();
            if (nodoAuxiliar != null) {
                cuadro = new Cuadro(this.jugador.getColor(),nodoFinal.getEjeX(), nodoFinal.getEjeY(),distanciaEntreNodos);
                nodoAuxiliar = nodoAuxiliar.getNodoAbajo();
                if (nodoAuxiliar != null) {
                    nodoAuxiliar = nodoAuxiliar.getNodoIzquierda();
                    if (nodoAuxiliar != null) {
                        this.listaDeCuadros.add(cuadro);
                        numeroDeCuadros++;
                    }
                }
            }
            
            //Valida si existe un cuadro a la izquierda
            nodoAuxiliar = nodoFinal.getNodoIzquierda();
            if (nodoAuxiliar != null) {
                cuadro = new Cuadro(this.jugador.getColor(),nodoAuxiliar.getEjeX(), nodoAuxiliar.getEjeY(),distanciaEntreNodos);
                nodoAuxiliar = nodoAuxiliar.getNodoAbajo();
                if (nodoAuxiliar != null) {
                    nodoAuxiliar = nodoAuxiliar.getNodoDerecha();
                    if (nodoAuxiliar != null) {
                        this.listaDeCuadros.add(cuadro);
                        numeroDeCuadros++;
                    }
                }
            }
        }
        return numeroDeCuadros;
    }
    
    public double obtenerDistanciaEntreNodos() {
        return this.listaDeNodos.get(1).getEjeX() - this.listaDeNodos.get(0).getEjeX();
    }

    public JPanel getPanel() {
        DefaultTableModel dtm = new DefaultTableModel();
        List<Integer> puntuacion = new ArrayList();
        for (int i = 0; i < listaDeJugadores.size(); i++) {
            puntuacion.add(0);
        }
        jTable1.setEnabled(false);
        dtm.setColumnIdentifiers(this.listaDeJugadores.toArray());
        dtm.addRow(puntuacion.toArray());
        jTable1.setModel(dtm);
        this.jPanel_Puntuacion.setSize(350, 400);
        return this.jPanel_Puntuacion;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel_Puntuacion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
